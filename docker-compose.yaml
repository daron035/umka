services:
  web:
    profiles: ["api"]
    container_name: umka.api
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 8000:8000
    networks:
      - umka.postgres.network

  postgres:
    profiles: ["postgres_db"]
    container_name: umka.postgres
    image: "postgres:17rc1-alpine"
    hostname: umka.postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - umka.postgres.network
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}

    volumes:
      - umka.postgres.data:/var/lib/postgresql/data:rw
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 10s

  postgres_backup:
    profiles: ["postgres_backup"]
    container_name: umka.postgres_backup
    image: prodrigestivill/postgres-backup-local:15-alpine
    networks:
      - umka.postgres.network
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-$USER}
      - POSTGRES_USER=${POSTGRES_USER:-$USER}
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - BACKUP_DIR=/backups
      - POSTGRES_EXTRA_OPTS=-Z6 --schema=public --blobs
      - SCHEDULE=${POSTGRES_BACKUP_SCHEDULE:-@daily}
      - HEALTHCHECK_PORT=8080
    volumes:
      - ${POSTGRES_BACKUP_DIR:-./.backups/postgres}:/backups

  pgadmin:
    profiles: ["postgres_db"]
    container_name: umka.pgadmin4
    image: dpage/pgadmin4
    restart: unless-stopped
    networks:
      - umka.postgres.network
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"

volumes:
  umka.postgres.data:

networks:
  umka.postgres.network:
